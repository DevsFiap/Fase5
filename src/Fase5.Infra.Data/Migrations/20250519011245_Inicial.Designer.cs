// <auto-generated />
using System;
using Fase5.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fase5.Infra.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250519011245_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fase5.Domain.Entities.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("JustificativaCancelamento")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consultas", (string)null);
                });

            modelBuilder.Entity("Fase5.Domain.Entities.HorarioDisponivel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ocupado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId", "Inicio", "Fim")
                        .IsUnique();

                    b.ToTable("HorariosDisponiveis", (string)null);
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Medico", b =>
                {
                    b.HasBaseType("Fase5.Domain.Entities.Usuario");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("ValorConsultaPadrao")
                        .HasColumnType("decimal(10,2)");

                    b.HasIndex("CRM")
                        .IsUnique()
                        .HasFilter("[CRM] IS NOT NULL");

                    b.ToTable("Medicos", (string)null);
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Paciente", b =>
                {
                    b.HasBaseType("Fase5.Domain.Entities.Usuario");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasIndex("CPF")
                        .IsUnique()
                        .HasFilter("[CPF] IS NOT NULL");

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Consulta", b =>
                {
                    b.HasOne("Fase5.Domain.Entities.Medico", "Medico")
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fase5.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Fase5.Domain.Entities.HorarioDisponivel", b =>
                {
                    b.HasOne("Fase5.Domain.Entities.Medico", "Medico")
                        .WithMany("HorariosDisponiveis")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Medico", b =>
                {
                    b.HasOne("Fase5.Domain.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Fase5.Domain.Entities.Medico", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("Fase5.Domain.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Fase5.Domain.Entities.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Medico", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("HorariosDisponiveis");
                });

            modelBuilder.Entity("Fase5.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Consultas");
                });
#pragma warning restore 612, 618
        }
    }
}
